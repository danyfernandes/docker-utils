services:
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - rabbitnet
    command: rabbitmq-server
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf # Mount the custom configuration file
    restart: always

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks:
      - rabbitnet
    ports:
      - "9100:9100"
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - "/proc:/host/proc"
      - "/sys:/host/sys"
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    networks:
      - rabbitnet
    ports:
      - "8080:8080"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - rabbitnet
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - rabbitnet
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    volumes:
      - ./datasource.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana-storage:/var/lib/grafana
    restart: always

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    networks:
      - rabbitnet
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - /var/log:/var/log # Mount host's log directory into Promtail container
      - /home/AzureDevOps/logs:/home/AzureDevOps/logs
    command: -config.file=/etc/promtail/promtail-config.yaml
    depends_on:
      - loki
    restart: always

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    networks:
      - rabbitnet
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/mnt/config/loki-config.yaml:ro
    command: -config.file=/mnt/config/loki-config.yaml
    restart: always

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9002:9000"
    networks:
      - rabbitnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Allow Portainer to connect to Docker API
    restart: always

networks:
  rabbitnet:
    name: rabbitnet

volumes:
  prometheus-data:
  rabbitmq-data:
  grafana-storage:
